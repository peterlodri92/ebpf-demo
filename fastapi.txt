## Project Structure
```
├── Makefile
├── __pycache__/
│    ├── main.cpython-312.pyc
│    ├── models.cpython-312.pyc
│    └── schemas.cpython-312.pyc
├── files/
├── main.py
├── models.py
├── openapi.yaml
├── poetry.lock
├── pyproject.toml
├── requirements.txt
├── schemas.py
├── test.txt
└── users.db
```

## models.py
```
\# models\.py
from sqlalchemy import Column, Integer, String
from sqlalchemy\.ext\.declarative import declarative\_base
from sqlalchemy\.orm import sessionmaker
from sqlalchemy import create\_engine

Base = declarative\_base\(\)
engine = create\_engine\("sqlite:///\./users\.db", connect\_args=\{"check\_same\_thread": False\}\)
SessionLocal = sessionmaker\(autocommit=False, autoflush=False, bind=engine\)

class User\(Base\):
    \_\_tablename\_\_ = 'users'

    id = Column\(Integer, primary\_key=True, index=True\)
    name = Column\(String, index=True\)
    email = Column\(String, unique=True, index=True\)

def init\_db\(\):
    Base\.metadata\.create\_all\(bind=engine\)
```
____

## requirements.txt
```
fastapi
uvicorn
sqlalchemy
pydantic
python\-multipart
bcc
```
____

## schemas.py
```
\# schemas\.py
from pydantic import BaseModel

class UserBase\(BaseModel\):
    name: str
    email: str

class UserCreate\(UserBase\):
    pass

class UserRead\(UserBase\):
    id: int

    class Config:
        orm\_mode = True
```
____

## test.txt
```
This is a test file for the FastAPI server upload endpoint\.
It contains some sample text that will be uploaded and then downloaded\.

```
____

## openapi.yaml
```
openapi: 3\.0\.0
info:
  title: User and File Management API
  version: 1\.0\.0
  description: API for managing users and files

paths:
  /users/:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        "201":
          description: User created successfully

  /users/\{user\_id\}:
    get:
      summary: Get user details
      parameters:
        \- name: user\_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User details retrieved successfully
    put:
      summary: Update user details
      parameters:
        \- name: user\_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: User updated successfully
    delete:
      summary: Delete a user
      parameters:
        \- name: user\_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User deleted successfully

  /upload:
    post:
      summary: Upload a file
      requestBody:
        required: true
        content:
          multipart/form\-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: File uploaded successfully

  /download/\{filename\}:
    get:
      summary: Download a file
      parameters:
        \- name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: File downloaded successfully
          content:
            application/octet\-stream:
              schema:
                type: string
                format: binary

```
____

## main.py
```
\# main\.py
import os
from fastapi import FastAPI, HTTPException, Depends, File, UploadFile
from fastapi\.responses import FileResponse
from sqlalchemy\.orm import Session

from models import User, SessionLocal, init\_db
from schemas import UserCreate, UserRead

app = FastAPI\(title="FastAPI \+ SQLite \+ eBPF Demo"\)

\# Initialize the DB \(create tables\)
init\_db\(\)

\# Dependency to get DB session
def get\_db\(\):
    db = SessionLocal\(\)
    try:
        yield db
    finally:
        db\.close\(\)

\# \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\# CRUD Routes for Users
\# \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-

@app\.post\("/users/", response\_model=UserRead\)
def create\_user\(user\_in: UserCreate, db: Session = Depends\(get\_db\)\):
    \# Check if email already exists
    existing\_user = db\.query\(User\)\.filter\(User\.email == user\_in\.email\)\.first\(\)
    if existing\_user:
        raise HTTPException\(status\_code=400, detail="Email already registered"\)
    
    user = User\(name=user\_in\.name, email=user\_in\.email\)
    db\.add\(user\)
    db\.commit\(\)
    db\.refresh\(user\)
    return user

@app\.get\("/users/\{user\_id\}", response\_model=UserRead\)
def read\_user\(user\_id: int, db: Session = Depends\(get\_db\)\):
    user = db\.query\(User\)\.filter\(User\.id == user\_id\)\.first\(\)
    if not user:
        raise HTTPException\(status\_code=404, detail="User not found"\)
    return user

@app\.put\("/users/\{user\_id\}", response\_model=UserRead\)
def update\_user\(user\_id: int, user\_in: UserCreate, db: Session = Depends\(get\_db\)\):
    user = db\.query\(User\)\.filter\(User\.id == user\_id\)\.first\(\)
    if not user:
        raise HTTPException\(status\_code=404, detail="User not found"\)
    
    user\.name = user\_in\.name
    user\.email = user\_in\.email
    db\.commit\(\)
    db\.refresh\(user\)
    return user

@app\.delete\("/users/\{user\_id\}"\)
def delete\_user\(user\_id: int, db: Session = Depends\(get\_db\)\):
    user = db\.query\(User\)\.filter\(User\.id == user\_id\)\.first\(\)
    if not user:
        raise HTTPException\(status\_code=404, detail="User not found"\)
    db\.delete\(user\)
    db\.commit\(\)
    return \{"detail": "User deleted"\}

\# \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\# File Upload/Download
\# \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-

UPLOAD\_DIR = "files"
os\.makedirs\(UPLOAD\_DIR, exist\_ok=True\)

@app\.post\("/upload/"\)
def upload\_file\(file: UploadFile = File\(\.\.\.\)\):
    file\_location = os\.path\.join\(UPLOAD\_DIR, file\.filename\)
    with open\(file\_location, "wb"\) as f:
        f\.write\(file\.file\.read\(\)\)
    return \{"info": f"File '\{file\.filename\}' saved at '\{file\_location\}'"\}

@app\.get\("/download/\{filename\}"\)
def download\_file\(filename: str\):
    file\_location = os\.path\.join\(UPLOAD\_DIR, filename\)
    if not os\.path\.exists\(file\_location\):
        raise HTTPException\(status\_code=404, detail="File not found"\)
    return FileResponse\(path=file\_location, filename=filename\)
```
____
